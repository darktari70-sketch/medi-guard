import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/components/ui/use-toast';

export default function RegisterPatient() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [profilePicture, setProfilePicture] = useState<File | null>(null);
  const [documents, setDocuments] = useState<FileList | null>(null);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    try {
      const formData = new FormData(e.currentTarget);
      
      // Upload profile picture if provided
      let profilePictureUrl = null;
      if (profilePicture) {
        const fileExt = profilePicture.name.split('.').pop();
        const fileName = `${Date.now()}_profile.${fileExt}`;
        const filePath = `profile-pictures/${fileName}`;

        const { error: uploadError } = await supabase.storage
          .from('patient-pictures')
          .upload(filePath, profilePicture);

        if (uploadError) throw uploadError;

        const { data: { publicUrl } } = supabase.storage
          .from('patient-pictures')
          .getPublicUrl(filePath);
        
        profilePictureUrl = publicUrl;
      }

      // Insert patient data (patient_id will be auto-generated by trigger)
      const { data: patient, error: patientError } = await supabase
        .from('patients')
        .insert({
          patient_id: '', // Will be auto-generated by trigger
          name: formData.get('name') as string,
          age: parseInt(formData.get('age') as string),
          gender: formData.get('gender') as string,
          phone: formData.get('phone') as string,
          address: formData.get('address') as string,
          notes: formData.get('notes') as string,
          profile_picture_url: profilePictureUrl,
        })
        .select()
        .single();

      if (patientError) throw patientError;

      // Upload documents if provided
      if (documents && documents.length > 0) {
        for (let i = 0; i < documents.length; i++) {
          const file = documents[i];
          const fileExt = file.name.split('.').pop();
          const fileName = `${Date.now()}_${i}_${file.name}`;
          const filePath = `documents/${patient.id}/${fileName}`;

          const { error: uploadError } = await supabase.storage
            .from('patient-documents')
            .upload(filePath, file);

          if (uploadError) throw uploadError;

          // Save file record
          await supabase
            .from('patient_files')
            .insert({
              patient_id: patient.id,
              file_name: file.name,
              file_path: filePath,
              file_type: file.type,
              file_size: file.size,
            });
        }
      }

      toast({
        title: "Success",
        description: `Patient ${patient.name} registered successfully with ID: ${patient.patient_id}`,
      });

      navigate(`/patient/${patient.id}`);
    } catch (error: any) {
      console.error('Error registering patient:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to register patient",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Register New Patient</h1>
        <p className="text-muted-foreground">
          Enter patient details to create a new record
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Patient Information</CardTitle>
          <CardDescription>
            All required fields must be completed
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="name">Full Name *</Label>
                <Input
                  id="name"
                  name="name"
                  placeholder="Enter patient's full name"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="age">Age *</Label>
                <Input
                  id="age"
                  name="age"
                  type="number"
                  min="0"
                  max="150"
                  placeholder="Enter age"
                  required
                />
              </div>
            </div>

            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="gender">Gender *</Label>
                <Select name="gender" required>
                  <SelectTrigger>
                    <SelectValue placeholder="Select gender" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="male">Male</SelectItem>
                    <SelectItem value="female">Female</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input
                  id="phone"
                  name="phone"
                  type="tel"
                  placeholder="Enter phone number"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="address">Address</Label>
              <Textarea
                id="address"
                name="address"
                placeholder="Enter complete address"
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Notes</Label>
              <Textarea
                id="notes"
                name="notes"
                placeholder="Any additional notes or medical history"
                rows={4}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="profile-picture">Profile Picture</Label>
              <Input
                id="profile-picture"
                type="file"
                accept="image/*"
                onChange={(e) => setProfilePicture(e.target.files?.[0] || null)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="documents">Medical Documents</Label>
              <Input
                id="documents"
                type="file"
                multiple
                accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                onChange={(e) => setDocuments(e.target.files)}
              />
              <p className="text-sm text-muted-foreground">
                Accepted formats: PDF, images, Word documents
              </p>
            </div>

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? "Registering..." : "Register Patient"}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}